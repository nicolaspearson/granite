name: backend.svc-consents

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/backend.svc-consents.yaml
      - packages/backend/svc-consents/**
      - packages/backend/tsconfig-backend.json
      - package.json
      - tsconfig.json
      - types/**/*.ts
      - '!**.md'
      - '!**/.gitignore'
  pull_request:
    paths:
      - .github/workflows/backend.svc-consents.yaml
      - packages/backend/svc-consents/**
      - packages/backend/tsconfig-backend.json
      - package.json
      - tsconfig.json
      - types/**/*.ts
      - '!**.md'
      - '!**/.gitignore'
  workflow_dispatch: null

env:
  DOCKER_CONTEXT_PATH: .
  DOCKERFILE: packages/backend/Dockerfile
  PACKAGE: svc-consents
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@master
      - name: Setup node.js
        uses: actions/setup-node@master
        with:
          node-version: 16
      - name: Install yarn
        run: yarn install --immutable
      - name: Build package
        run: yarn workspace $PACKAGE build
      - name: Lint package
        run: yarn workspace $PACKAGE lint
  test_unit:
    name: Test Unit
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout git repository
        uses: actions/checkout@master
      - name: Setup node.js
        uses: actions/setup-node@master
        with:
          node-version: 16
      - name: Install yarn
        run: yarn install --immutable
      - name: Run package unit tests
        run: yarn workspace $PACKAGE test:unit
  test_integration:
    name: Test Integration
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout git repository
        uses: actions/checkout@master
      - name: Setup node.js
        uses: actions/setup-node@master
        with:
          node-version: 16
      - name: Install yarn
        run: yarn install --immutable
      - name: Run package integration tests
        run: yarn workspace $PACKAGE test:integration:ci
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: granite
          POSTGRES_PORT: 5432
          POSTGRES_PASSWORD: secret
          POSTGRES_USER: granite
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      TYPEORM_HOST: 0.0.0.0
      TYPEORM_PORT: 5432
      TYPEORM_DATABASE: granite
      TYPEORM_SCHEMA: public
      TYPEORM_USERNAME: granite
  deployment:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - build
      - test_unit
      - test_integration
    steps:
      - name: Create Github Deployment
        uses: avakar/create-deployment@v1
        with:
          auto_merge: false
          ref: ${{ github.ref }}
          required_contexts: ''
          payload: |
            {
              "package": "${{ env.PACKAGE }}",
              "description": ${{ toJSON(github.event.head_commit.message) }},
              "docker": {
                "context": "${{ env.DOCKER_CONTEXT_PATH }}",
                "file": "${{ env.DOCKERFILE }}"
              },
              "owner": "${{ github.event.pusher && github.event.pusher.name || 'nicolaspearson' }}",
            }
          production_environment: false
          transient_environment: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
